plugins {
    id("com.android.application")
    id("kotlin-android")
    alias(libs.plugins.jetbrains.compose)
    alias(libs.plugins.kotlin.compose)
    id("org.jetbrains.kotlin.plugin.serialization")
    alias(libs.plugins.ksp)
////    id("io.realm.kotlin")
//    alias(libs.plugins.room)
//    id("de.jensklingenberg.ktorfit")

}

android {
    compileSdk 36
    lintOptions {  //lint {
        warningsAsErrors = false
        abortOnError = true
        checkAllWarnings = true
        ignoreWarnings = false
        checkDependencies = true
        htmlReport = true
        explainIssues = true
        noLines = false
        textOutput = file("stdout")
//        disable.add("MissingClass")
//        disable.add("NewApi")
        disable 'MissingTranslation',
                'ExtraTranslation',
                'TypographyEllipsis',
                'UnspecifiedImmutableFlag',
                'UnusedResources',
                'TypographyDashes'
    }

    buildFeatures {
        viewBinding true
        buildConfig true
        compose true
        flavorDimensions = ["product_code"]
    }

    namespace 'rooit.me.xo.app'
    defaultConfig {
        applicationId "rooit.me.xo.app"
        minSdk 21
        targetSdk 36
        versionCode 1
        versionName "1.0"
        buildConfigField("String", "BASE_URL", "\"https://newsapi.org/\"")
        buildConfigField("String", "API_KEY", "\"f53a2c1085bd4e19859f4f3b07f2babf\"")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            matchingFallbacks = ['release', 'debug']
            minifyEnabled false
            shrinkResources false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-system-common.pro', 'proguard-third-party.pro', 'proguard-module.pro'
        }
        release {
            matchingFallbacks = ['release', 'debug']
            minifyEnabled false
            shrinkResources false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

//    flavorDimensions "product_code"//move to buildFeatures
    productFlavors {
        legacy_nav {
            getIsDefault().set(true)
            dimension "product_code"
            dependencies {
                implementation(libs.androidx.fragment.ktx)
                implementation(libs.material)
                implementation(libs.androidx.constraintlayout)
                implementation(libs.androidx.navigation.fragment.ktx)
                implementation(libs.androidx.splashscreen)
                implementation(libs.androidx.lifecycle.livedata.ktx)
                implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01")
                implementation(libs.glide)
                ksp(libs.glide.ksp)

//                debugImplementation project(path: ':shared', configuration: 'legacy_navDebug')
//                releaseImplementation project(path: ':shared', configuration: 'legacy_navRelease')
            }
        }

        cmp_kmp {
            dimension "product_code"
            dependencies {


                implementation(libs.androidx.lifecycle.runtime.compose)

                implementation(libs.androidx.activity.compose)
//                //Jetpack compose
//                implementation(platform(libs.androidx.compose.bom))
////                def composeBom = platform(libs.androidx.compose.bom)
////                implementation(composeBom)
//                implementation(libs.androidx.compose.ui)
//                implementation(libs.androidx.compose.ui.graphics)
//                implementation(libs.androidx.compose.ui.tooling.preview)
//                implementation(libs.androidx.compose.foundation)
//
//                implementation(libs.androidx.compose.material)
//                implementation(libs.androidx.compose.material3)
//                implementation(libs.androidx.compose.material.icons.core)
//                implementation(libs.androidx.navigation.compose)

                //jetbrains  compose
                implementation(compose.runtime)
                implementation(compose.foundation)
                implementation(compose.material)
                implementation(compose.material3)
                implementation(compose.ui)
                implementation(compose.components.resources)
                implementation(compose.components.uiToolingPreview)
                implementation(libs.jetbrains.androidx.lifecycle.viewmodel.compose)
                implementation(libs.jetbrains.androidx.navigation.compose)
                implementation(compose.preview)

                implementation(libs.urlencoder.lib)


                implementation(libs.koin.androidx.compose)
                implementation(libs.koin.androidx.compose.navigation)
//                implementation(libs.koin.compose)
                implementation(libs.koin.compose.viewmodel)
                implementation(libs.koin.compose.viewmodel.navigation)

                implementation(libs.coil.core)
                implementation(libs.coil)
                implementation(libs.coil.compose)
                implementation(libs.coil.compose.core)
                implementation(libs.coil.network.ktor3)
                implementation(libs.coil.svg)

//                debugImplementation project(path: ':shared', configuration: 'cmp_kmpDebug')
//                releaseImplementation project(path: ':shared', configuration: 'cmp_kmpRelease')
            }
        }
    }
}

dependencies {
    implementation(libs.kotlin.stdlib)
    implementation(libs.kotlinx.serialization.core)
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.kotlinx.coroutines.android)
    implementation(libs.kotlinx.datetime)

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.activity.ktx)

    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)

    implementation(libs.androidx.navigation.ui.ktx)

    implementation(libs.de.ktorfit)
    implementation(libs.de.ktorfit.converters.call)
    implementation(libs.de.ktorfit.converters.flow)

    implementation(libs.koin.core)
    implementation(libs.koin.android)

    implementation(libs.napier)
    
//    implementation(libs.realm.kotlin.base)
//    implementation (libs.realm.kotlin.sync)

    legacy_navImplementation project(':legacy_nav')
    cmp_kmpImplementation project(':shared')
    implementation project(':common')
     /*
     //kts
     // general dependencies
    implementation(project(":shared"))

     // Flavor-specific dependencies
     // app的 legacy_navDebug auto dependencies shared的 legacy_navDebug
     // app的 legacy_navRelease auto dependencies shared的 legacy_navRelease
     add("legacy_navImplementation", project(mapOf("path" to ":shared", "configuration" to "legacy_navRelease")))
     /
     // add("legacy_navDebugImplementation", project(mapOf("path" to ":shared", "configuration" to "legacy_navDebug")))
     // add("legacy_navReleaseImplementation", project(mapOf("path" to ":shared", "configuration" to "legacy_navRelease")))


     // app的 cmp_kmpDebug auto dependencies shared的 cmp_kmpDebug
     // app的 cmp_kmpRelease auto dependencies shared的 cmp_kmpRelease
     add("cmp_kmpImplementation", project(mapOf("path" to ":shared", "configuration" to "cmp_kmpRelease")))
     // add("cmp_kmpDebugImplementation", project(mapOf("path" to ":shared", "configuration" to "cmp_kmpDebug")))
     // add("cmp_kmpReleaseImplementation", project(mapOf("path" to ":shared", "configuration" to "cmp_kmpRelease")))
     */
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}